Timings for five mutexes. Still slow. Uses "index % 5" to determine which mutex to use. Essentially allows concurrency of 5 threads at once, depending on the location of their index (assuming they are all spaced out well).
1000 threads. 100 array elements.


MATLAB Code to initialize array of timings:

timings = [1.217369 1.023139 1.222064 1.222098 1.023084 3.020697 3.227689 15.04391 15.04504 3.224368 3.020293 3.030678 3.021006 1.023964 3.225759 3.019576 3.228202 3.018562 1.225361 3.027920 3.015900 3.024508 3.026966 7.030950 15.24732 3.025814 1.025232 7.694948 3.026674 7.030609 1.026898 3.027175 15.03778 3.230532 7.031887 3.232937 7.031346 3.020813 7.243292 3.220604 3.230899 3.227582 1.023875 3.023687 7.032647 3.217948 3.026457 1.218430 3.433202 3.022069 3.018281 1.022437 3.020043 3.221309 3.430769 7.240563 3.018540 1.220321 1.031674 1.219676 15.04870 3.433382 7.026558 7.701600 7.246301 1.018772 7.033395 3.227096 3.023268 3.427107 3.224000 7.026795 1.419833 1.224044 3.024731 3.018265 3.022325 1.027487 3.682384 3.023678 3.023667 7.028396 3.022846 3.018806 7.028013 7.025259 7.028072 15.03924 3.026274 3.218334 1.022987 1.219524 1.023637 3.022620 1.032836 3.019620 3.218745 3.020353 3.028758 3.020167]



Code:


void *ServerEcho(void *args) {
    int clientFileDescriptor=(int)args;
    char str[STRMAX];

    read(clientFileDescriptor,str,STRMAX);

    char* pos = str;
    pos++;
    int index = atoi(pos);

    pthread_mutex_lock(&mutexArray[index % 5]);
    if (str[0] == 'w') {
        sprintf(str, "String %d has been modified by a write request", index);
        sprintf(theArray[index], "%s", str);
    } else {
        sprintf(str,theArray[index],STRMAX);        
    }
    pthread_mutex_unlock(&mutexArray[index % 5]);

    write(clientFileDescriptor,str,STRMAX);
    
    read(clientFileDescriptor,str,STRMAX);

    close(clientFileDescriptor);
}





Data:

1.217369
1.023139
1.222064
1.222098
1.023084
3.020697
3.227689
15.04391
15.04504
3.224368
3.020293
3.030678
3.021006
1.023964
3.225759
3.019576
3.228202
3.018562
1.225361
3.027920
3.015900
3.024508
3.026966
7.030950
15.24732
3.025814
1.025232
7.694948
3.026674
7.030609
1.026898
3.027175
15.03778
3.230532
7.031887
3.232937
7.031346
3.020813
7.243292
3.220604
3.230899
3.227582
1.023875
3.023687
7.032647
3.217948
3.026457
1.218430
3.433202
3.022069
3.018281
1.022437
3.020043
3.221309
3.430769
7.240563
3.018540
1.220321
1.031674
1.219676
15.04870
3.433382
7.026558
7.701600
7.246301
1.018772
7.033395
3.227096
3.023268
3.427107
3.224000
7.026795
1.419833
1.224044
3.024731
3.018265
3.022325
1.027487
3.682384
3.023678
3.023667
7.028396
3.022846
3.018806
7.028013
7.025259
7.028072
15.03924
3.026274
3.218334
1.022987
1.219524
1.023637
3.022620
1.032836
3.019620
3.218745
3.020353
3.028758
3.020167